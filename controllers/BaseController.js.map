{"version":3,"sources":["controllers/BaseController.ts"],"names":[],"mappings":"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","file":"BaseController.js","sourcesContent":["\"use strict\";\n    \n/// <reference path=\"../typings/tsd.d.ts\"/>\n/// <reference path=\"../typings/express/express.d.ts\"/>\nimport {Express, Request, Response, Router, RequestHandler} from \"express\";\nimport express = require(\"express\");\n\n/**\n * Get actionfilter decorator\n */\nexport function get(path?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (typeof target == \"object\" && target instanceof BaseController) {\n            path = fixPath(propertyKey, path);\n            LogRouterSetup(ActionType.Get, propertyKey, path);\n            (<BaseController>target).RegisterActionFilter(\n                target.constructor.name, propertyKey, ActionType.Get, path);\n        }\n    };\n}\n\n/**\n * Post actionfilter decorator\n */\nexport function post(path?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            path = fixPath(propertyKey, path);\n            LogRouterSetup(ActionType.Get, propertyKey, path);\n            (<BaseController>target).RegisterActionFilter(\n                target.constructor.name, propertyKey, ActionType.Post, path);\n        }\n    };\n}\n\n/**\n * Put actionfilter decorator\n */\nexport function put(path?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            path = fixPath(propertyKey, path);\n            LogRouterSetup(ActionType.Get, propertyKey, path);\n            (<BaseController>target).RegisterActionFilter(\n                target.constructor.name, propertyKey, ActionType.Put, path);\n        }\n    };\n}\n\n/**\n * Delete actionfilter decorator\n */\nexport function del(path?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            path = fixPath(propertyKey, path);\n            LogRouterSetup(ActionType.Get, propertyKey, path);\n            (<BaseController>target).RegisterActionFilter(\n                target.constructor.name, propertyKey, ActionType.Delete, path);\n        }\n    };\n}\n\n/**\n * Transmit raw data\n */\nexport function raw() {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            var method = descriptor.value;\n            var controller = <BaseController>target;\n            descriptor.value = function(request: Request, response: Response, next: Function) {\n                try {\n                    // Find the controller instance\n                    var controller = BaseController.FindControllerInstance(target.constructor.name);\n                    \n                    // Apply the method\n                    var data = method.apply(controller, [new ActionContext(request, response)]);\n\n                    // Return the data\n                    response.send(data);\n                }\n                catch (e) {\n                    console.error(e);\n                    response.status(500);\n                    response.end();\n                }\n            };\n            return descriptor;\n        }\n    };\n}\n\n/**\n * Transmit a view\n */\nexport function view(view: string) {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            var method = descriptor.value;\n            var controller = <BaseController>target;\n            descriptor.value = function(request: Request, response: Response, next: Function) {\n                try {\n                    // Find the controller instance\n                    var controller = BaseController.FindControllerInstance(target.constructor.name);\n                    \n                    // Apply the method\n                    var data = method.apply(controller, [new ActionContext(request, response)]);\n                    if(data && (data instanceof Promise || data.then)){\n                        // Wait for the promise and return the data\n                        (<Promise<any>>data).then((_data) => {\n                            response.render(view, _data);\n                        });\n                    }\n                    else{\n                        // Return the data sync\n                        response.render(view, data);\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                    response.status(500);\n                    response.end();\n                }\n            };\n            return descriptor;\n        }\n    };\n}\n\n/**\n * Transmit json data\n */\nexport function json() {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        if (isTarget(target)) {\n            var method = descriptor.value;\n            var controller = <BaseController>target;\n\n            descriptor.value = function(request: Request, response: Response, next: Function) {\n                try {\n                    // Find the controller instance\n                    var controller = BaseController.FindControllerInstance(target.constructor.name);\n\n                    // Apply the method\n                    var data = method.apply(controller, [new ActionContext(request, response)]);\n                    if(data && (data instanceof Promise || data.then)){\n                        // Wait for the promise and return the data\n                        (<Promise<any>>data).then((_data) => {\n                            response.json(_data);\n                        });\n                    }\n                    else{\n                        // Return the data sync\n                        response.json(data);\n                        \n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                    response.status(500);\n                    response.end(\"[]\");\n                }\n            };\n            return descriptor;\n        }\n    };\n}\n\n/**\n * Check if the target is correct for the decorator\n */\nfunction isTarget(target: any): boolean {\n    return typeof target == \"object\" && target instanceof BaseController;\n}\n\n/**\n * Fix the path, change tilde to the propertykey and return a valid path\n */\nfunction fixPath(propertyKey: string, path?: string) {\n    // Set the path if not defined\n    if (path === undefined || path === null) {\n        path = \"/\" + propertyKey;\n    }\n    \n    // Replace the tilde\n    path = path.replace(\"~\", propertyKey);\n        \n    // Fix the starting tilde\n    if (!path.startsWith(\"/\")) {\n        path = \"/\" + path;\n    }\n        \n    // Return the path\n    return path.toLowerCase();\n}\n\nfunction LogRouterSetup(type: ActionType, propertyKey: string, path: string) {\n    console.log(\" ... Setting up\", type.toString(), \"for method \", propertyKey, \"->\", path);\n}\n\n/**\n * Enumeration for the different action filters\n */\nexport enum ActionType {\n    Get,\n    Post,\n    Put,\n    Delete\n}\n\n/**\n * Actionfilter storage item\n */\nexport class ActionFilter {\n\n    public constructor(\n        public className: string,\n        public key: string,\n        public type: ActionType,\n        public path?: string\n    ) {\n        if (!this.path || this.path == \"\") {\n            this.path = \"/\" + this.key.toLowerCase();\n        }\n        if (!this.path.startsWith(\"/\")) {\n            this.path = \"/\" + this.path;\n        }\n    }\n\n    public GetPath() {\n        return this.path;\n    }\n}\n\n/**\n * Action context wrapping the request and response objects\n */\nexport class ActionContext {\n\n    public urlParams: string[] = [];\n    public body: any = null;\n\n    public constructor(public request: Request, public response: Response) {\n        this.urlParams = this.ParseParams();\n        this.body = this.ParseBody();\n    }\n\n    private ParseBody() {\n        if (this.request.body)\n            return this.request.body;\n        else\n            return null;\n    }\n\n    private ParseParams(): string[] {\n        if (this.request.params) {\n            var index = 0;\n            var result: string[] = [];\n            while (this.request.params.hasOwnProperty(index.toString())) {\n                if (this.request.params[index.toString()]) {\n                    var parts = this.request.params[index.toString()].split(\"/\");\n                    parts.forEach((value) => { result.push(value); });\n                }\n                index++;\n            }\n            return result;\n        }\n        else return null;\n    }\n}\n\n/**\n * A base controller\n */\nexport class BaseController {\n    \n    // Storage for all the defined actionfilters\n    static actions: ActionFilter[] = [];\n    static controllers: BaseController[] = [];\n    private express: Express;\n\n    public constructor() {\n    }\n    \n    // Get a configured router\n    public GetRouter(): Router {\n        // Create a new router\n        var router = express.Router();\n        var className = this.constructor.name;\n        \n        // Log it\n        console.log(\" ... Configuring router for\", className);\n\n        var _this = this;\n        \n        // Configure it based on the stored metadata\n        var actions = BaseController.actions.filter((value, index) => {\n            return value.className == className;\n        });\n        \n        // Configure the router\n        actions.forEach((value, index) => {\n            switch (value.type) {\n                case ActionType.Get:\n                    router.get(value.GetPath(), <RequestHandler>_this[value.key]);\n                    break;\n                case ActionType.Post:\n                    router.post(value.GetPath(), <RequestHandler>_this[value.key]);\n                    break;\n                case ActionType.Put:\n                    router.put(value.GetPath(), <RequestHandler>_this[value.key]);\n                    break;\n                case ActionType.Delete:\n                    router.delete(value.GetPath(), <RequestHandler>_this[value.key]);\n                    break;\n            }\n        });\n        \n        // Return it\n        return router;\n    }\n    \n    // Register an action filter\n    public RegisterActionFilter(className: string, key: string, actionType: ActionType, path?: string): void {\n        if (!this.IsActionRegistered(className, key)) {\n            BaseController.actions.push(\n                new ActionFilter(\n                    className, key, actionType, path\n                ));\n        }\n    }\n    \n    // Register a controller\n    public static RegisterController(controller:BaseController){\n        var key = controller.constructor.name;\n        BaseController.controllers[key] = controller;\n    }\n    \n    // Find a registered controller\n    public static FindControllerInstance(key: string){\n        return BaseController.controllers[key];\n    }\n    \n    // Avoid double registration of actionfilters\n    private IsActionRegistered(className: string, key: string) {\n        BaseController.actions.filter((value) =>\n            value.className != className && value.key != key\n        );\n    }\n}"]}